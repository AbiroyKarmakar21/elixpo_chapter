import json
from typing import Optional
from boson_multimodal.serve.serve_engine import HiggsAudioServeEngine
from boson_multimodal.data_types import ChatMLSample, Message, AudioContent
from fastapi import HTTPException
from utility import set_random_seed
from loguru import logger
from config import DEFAULT_STOP_STRINGS, SAMPLE_RATE
import traceback 
import torch
import io
import torchaudio
import os
import asyncio
from templates import create_speaker_chat 

higgs_engine: Optional[HiggsAudioServeEngine] = None

def reconstruct_message(m):
    # If content is a list, reconstruct AudioContent objects
    content = m["content"]
    if isinstance(content, list):
        content = [AudioContent(**c) for c in content]
    return Message(role=m["role"], content=content)

async def synthesize_speech(
    chatTemplate_path: str,
    seed: Optional[int] = None,
    higgs_engine: Optional[HiggsAudioServeEngine] = None
) -> bytes:
    if higgs_engine is None:
        raise HTTPException(status_code=500, detail="TTS engine not initialized")
    try:

        with open(chatTemplate_path, "r", encoding="utf-8") as f:
            messages = json.load(f)   # list of dicts
        # FIX: reconstruct Message and AudioContent objects
        chatTemplate = ChatMLSample(messages=[reconstruct_message(m) for m in messages])
        logger.info(f"Processing chat template for synthesis")
        temperature: float = 0.7
        top_p: float = 0.95
        top_k: int = 50
        set_random_seed(seed)
        try:
            response = higgs_engine.generate(
                chat_ml_sample=chatTemplate,
                max_new_tokens=2048,
                temperature=temperature,
                top_k=top_k if top_k > 0 else None,
                top_p=top_p,
                stop_strings=DEFAULT_STOP_STRINGS,
                ras_win_len=7,
                ras_win_max_num_repeat=2,
                force_audio_gen=True
            )
            logger.info(f"Waiting for audio synthesis")
        except Exception as gen_error:
            logger.error(f"Generation error: {gen_error}")
            logger.error(f"Generation traceback: {traceback.format_exc()}")
            logger.info("Retrying with minimal parameters...")
            response = higgs_engine.generate(
                chat_ml_sample=chatTemplate,
                max_new_tokens=512,
                temperature=0.8,
                force_audio_gen=True
            )
        if response.audio is None:
            raise HTTPException(status_code=500, detail="No audio generated by model")
        audio_tensor = torch.from_numpy(response.audio).unsqueeze(0)
        if hasattr(response, 'sampling_rate'):
            sample_rate = response.sampling_rate
        else:
            sample_rate = SAMPLE_RATE
        buffer = io.BytesIO()
        torchaudio.save(buffer, audio_tensor, sample_rate, format="WAV")
        audio_bytes = buffer.getvalue()
        logger.info(f"Generated audio: {len(audio_bytes)} bytes at {sample_rate}Hz")
        return audio_bytes
    except Exception as e:
        logger.error(f"Synthesis error: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Synthesis failed: {str(e)}")

if __name__ == "__main__":
    
    chatTemplate = create_speaker_chat(
        "Hmm... Once upon a time, in a small, bustling village surrounded by tall, green trees, there lived a mighty lion. The villagers would often hear his gentle roar echoing through the hills—oh, but don’t worry, he was a friendly lion! One sunny morning, as the children played near the river, the lion strolled into the village, hmm, pausing to sniff the sweet scent of fresh bread. The villagers, at first, were a little scared, but the lion sat down, swished his tail, and let out a soft, happy rumble. 'Hello, friends,' he seemed to say. From that day on, the lion and the villagers became the best of friends. They shared stories, laughter, and sometimes, hmm, even a loaf of bread or two. And so, the village was never lonely again, for they had the bravest—and kindest—lion as their friend. Hmm, what a wonderful place it was!",
        "request-123",
        "Add soft music to the background which will sound like a cool theme of the soundtrack, low upbeat music [SOUND EFFECTS]"
        
    )
    async def main():
        global higgs_engine
        higgs_engine = HiggsAudioServeEngine("bosonai/higgs-audio-v2-generation-3B-base", "bosonai/higgs-audio-v2-tokenizer")
        audio_bytes = await synthesize_speech(chatTemplate)
        with open("output.wav", "wb") as f:
            f.write(audio_bytes)
        print("Audio saved as output.wav")

    asyncio.run(main())