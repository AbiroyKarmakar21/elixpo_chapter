{
  "name": "ai-input-04",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resizer-textarea\"\nimport { cn } from \"@/lib/utils\"\nimport { Send, Mic, MessageCircle } from \"lucide-react\"\nimport { useState } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { AIInputVariant04Props } from \"./types/types\"\n\n// âœ… Props types\n\n\nexport const AIInputFour: React.FC<AIInputVariant04Props> = ({\n  placeholder = \"Type your message here...\",\n  minHeight = 52,\n  maxHeight = 200,\n  title = \"AI Chat\",\n  typingAnimation = true,\n  showMic = true,\n  showBubbleTail = true,\n  onSubmit,\n  onMicClick,\n}) => {\n  const { adjustHeight, textareaRef } = useAutoResizeTextarea({ minHeight, maxHeight })\n  const [inputValue, setInputValue] = useState(\"\")\n  const [isTyping, setIsTyping] = useState(false)\n\n  const handleReset = () => {\n    if (onSubmit) onSubmit(inputValue)\n    setInputValue(\"\")\n    adjustHeight(true)\n  }\n\n  return (\n    <div className=\"w-full py-4\">\n      <div className=\"relative max-w-xl w-full mx-auto\">\n        <motion.div className=\"relative\" layout transition={{ duration: 0.3, ease: \"easeInOut\" }}>\n          {/* Chat bubble tail (toggleable) */}\n          {showBubbleTail && (\n            <div className=\"absolute -bottom-2 left-8 w-4 h-4 bg-white dark:bg-gray-800 rotate-45 border-r border-b border-gray-200 dark:border-gray-700\" />\n          )}\n\n          <div className=\"relative bg-white dark:bg-gray-800 rounded-3xl border border-gray-200 dark:border-gray-700 shadow-xl\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between px-6 py-3 border-b border-gray-100 dark:border-gray-700\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{ scale: typingAnimation && isTyping ? [1, 1.2, 1] : 1 }}\n                  transition={{ duration: 0.5, repeat: isTyping ? Number.POSITIVE_INFINITY : 0 }}\n                >\n                  <MessageCircle className=\"w-4 h-4 text-blue-500\" />\n                </motion.div>\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{title}</span>\n              </div>\n\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\" />\n                <div className=\"w-2 h-2 bg-yellow-400 rounded-full\" />\n                <div className=\"w-2 h-2 bg-red-400 rounded-full\" />\n              </div>\n            </div>\n\n            {/* Input area */}\n            <div className=\"p-4\">\n              <div className=\"flex items-end gap-3\">\n                <div className=\"flex-1\">\n                  <Textarea\n                    placeholder={placeholder}\n                    className={cn(\n                      \"bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-2xl resize-none\",\n                      \"placeholder:text-gray-400 dark:placeholder:text-gray-500\",\n                      \"text-gray-900 dark:text-white\",\n                      \"focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-0 focus-visible:border-transparent\",\n                      \"min-h-[52px] max-h-[200px] py-3 px-4\",\n                    )}\n                    ref={textareaRef}\n                    value={inputValue}\n                    onFocus={() => setIsTyping(true)}\n                    onBlur={() => setIsTyping(false)}\n                    onChange={(e) => {\n                      setInputValue(e.target.value)\n                      adjustHeight()\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\" && !e.shiftKey) {\n                        e.preventDefault()\n                        handleReset()\n                      }\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex items-center gap-2 pb-3\">\n                  {/* Mic button (toggleable) */}\n                  {showMic && (\n                    <motion.button\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                      onClick={onMicClick}\n                      className=\"p-3 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n                    >\n                      <Mic className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                    </motion.button>\n                  )}\n\n                  {/* Send button */}\n                  <AnimatePresence>\n                    {inputValue && (\n                      <motion.button\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        exit={{ opacity: 0, scale: 0.8 }}\n                        whileHover={{ scale: 1.1 }}\n                        whileTap={{ scale: 0.9 }}\n                        onClick={handleReset}\n                        className=\"p-3 rounded-full bg-blue-500 hover:bg-blue-600 text-white transition-colors\"\n                      >\n                        <Send className=\"w-4 h-4\" />\n                      </motion.button>\n                    )}\n                  </AnimatePresence>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "src/components/FingUIComponents/ai-input/ai-input-04.tsx",
      "target": "src/components/FingUIComponents/ai-input-04.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}",
      "path": "src/hooks/use-auto-resizer-textarea.ts",
      "target": "src/components/FingUIComponents/use-auto-resizer-textarea.ts"
    }
  ]
}