name: Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy radon

      - name: Run linters
        id: lint
        continue-on-error: true
        run: |
          echo "=== Flake8 ===" > lint_output.txt
          flake8 . --count --statistics --max-line-length=100 >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Black ===" >> lint_output.txt
          black --check . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== isort ===" >> lint_output.txt
          isort --check-only . >> lint_output.txt 2>&1 || true
          
          echo -e "\n=== Complexity ===" >> lint_output.txt
          radon cc . -a -nb >> lint_output.txt 2>&1 || true

      - name: Get lint results
        id: results
        run: |
          LINT_OUTPUT=$(cat lint_output.txt)
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Quality Analysis
        id: analysis
        run: |
          PROJECT_CONTEXT=$(cat .github/PROJECT_CONTEXT.md)
          
          PROMPT="You are analyzing code quality for Memory-Arc, a Python memory management system.

          PROJECT CONTEXT:
          $PROJECT_CONTEXT

          Linting Results:
          ${{ steps.results.outputs.output }}

          Provide a quality report with:
          1. **Overall Score**: Rate 1-10
          2. **Key Issues**: Most important problems to fix
          3. **Code Style**: Formatting and style issues
          4. **Complexity**: Any overly complex code
          5. **Recommendations**: Prioritized action items

          Be constructive and specific. Use emojis and markdown."

          ANALYSIS=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d "{
              \"model\": \"gemini\",
              \"messages\": [{\"role\": \"user\", \"content\": $(echo "$PROMPT" | jq -Rs .)}],
              \"temperature\": 0.3,
              \"max_tokens\": 1000
            }" | jq -r '.choices[0].message.content')

          echo "analysis<<EOF" >> $GITHUB_OUTPUT
          echo "$ANALYSIS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Quality Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const report = `## üìä Code Quality Report

            ${{ steps.analysis.outputs.analysis }}

            <details>
            <summary>üîç Detailed Linting Output</summary>

            \`\`\`
            ${{ steps.results.outputs.output }}
            \`\`\`

            </details>

            ---
            *Generated by AI Code Quality Assistant*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
