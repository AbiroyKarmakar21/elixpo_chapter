name: AI Release Notes

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true

permissions:
  contents: write

jobs:
  generate-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get commits since last release
        id: commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%h - %s (%an)" --no-merges | head -50)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%h - %s (%an)" --no-merges)
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate AI Release Notes
        id: notes
        run: |
          TAG="${{ github.event.release.tag_name || github.event.inputs.tag }}"
          PROJECT_CONTEXT=$(cat .github/PROJECT_CONTEXT.md)
          
          PROMPT="You are generating release notes for Memory-Arc v$TAG, a Python memory management system for AI applications.

          PROJECT CONTEXT:
          $PROJECT_CONTEXT

          Commits since last release:
          ${{ steps.commits.outputs.commits }}

          Generate professional release notes with:
          1. **Highlights**: Top 3-5 new features/improvements
          2. **Features**: New capabilities added
          3. **Improvements**: Enhancements to existing features
          4. **Bug Fixes**: Issues resolved
          5. **Breaking Changes**: If any (mark clearly)
          6. **Upgrade Guide**: How to upgrade from previous version

          Use emojis, markdown formatting, and keep it exciting but professional!"

          NOTES=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.POLLI_TOKEN }}" \
            -d "{
              \"model\": \"gemini\",
              \"messages\": [{\"role\": \"user\", \"content\": $(echo "$PROMPT" | jq -Rs .)}],
              \"temperature\": 0.5,
              \"max_tokens\": 2000
            }" | jq -r '.choices[0].message.content')

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release
        if: github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const notes = `${{ steps.notes.outputs.notes }}

            ---

            ## ðŸ“¦ Installation

            \`\`\`bash
            pip install memory-arc==${{ github.event.release.tag_name }}
            \`\`\`

            ## ðŸ”— Links

            - [Documentation](https://github.com/Itachi-1824/Memory-Arc#readme)
            - [Quick Start](https://github.com/Itachi-1824/Memory-Arc/blob/main/QUICKSTART.md)
            - [Examples](https://github.com/Itachi-1824/Memory-Arc/tree/main/examples)

            ---
            *Release notes generated by AI*
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: notes
            });
