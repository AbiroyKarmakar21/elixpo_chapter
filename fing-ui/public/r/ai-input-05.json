{
  "name": "ai-input-05",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useRef, useEffect } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { Mic, Send, Terminal } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resizer-textarea\"\nimport { AIInputFiveProps } from \"./types/types\"\n\n\nexport const AIInputFive = ({\n  onSubmit,\n  placeholder = \"Enter your command...\",\n  title = \"AI Terminal\",\n  version = \"v2.1.0\",\n}: AIInputFiveProps) => {\n  const [input, setInput] = useState(\"\")\n  const [isRecording, setIsRecording] = useState(false)\n  const [isSending, setIsSending] = useState(false)\n  const [showCursor, setShowCursor] = useState(true)\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  useAutoResizeTextarea({ minHeight: 52, maxHeight: 200 })\n\n  // Blinking cursor effect\n  useEffect(() => {\n    const interval = setInterval(() => setShowCursor((prev) => !prev), 530)\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleSend = async () => {\n    if (!input.trim()) return\n    setIsSending(true)\n    await new Promise((resolve) => setTimeout(resolve, 500)) // simulate delay\n    onSubmit(input.trim()) // ðŸ”¥ send prompt back to parent\n    setInput(\"\")\n    setIsSending(false)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n\n  return (\n    <motion.div\n      className=\"w-full max-w-4xl mx-auto\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <div className=\"bg-black border border-green-500/30 rounded-lg overflow-hidden font-mono\">\n        {/* Terminal Header */}\n        <div className=\"bg-gray-900 px-4 py-2 border-b border-green-500/30 flex items-center gap-2\">\n          <div className=\"flex gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n          </div>\n          <Terminal className=\"w-4 h-4 text-green-400 ml-2\" />\n          <span className=\"text-green-400 text-sm\">\n            {title} {version}\n          </span>\n        </div>\n\n        {/* Terminal Body */}\n        <div className=\"p-4 bg-black\">\n          <div className=\"text-green-400 text-sm mb-2\">\n            <span className=\"text-green-300\">user@ai-terminal</span>\n            <span className=\"text-white\">:</span>\n            <span className=\"text-blue-400\">~</span>\n            <span className=\"text-white\">$ </span>\n            <span className=\"text-yellow-400\">ai-chat --interactive</span>\n          </div>\n\n          <div className=\"text-green-400 text-sm mb-4\">\n            AI Chat Interface initialized. Type your message below:\n          </div>\n\n          <div className=\"flex items-start gap-2\">\n            <span className=\"text-green-300 text-sm mt-2 shrink-0\">&gt;</span>\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder={placeholder}\n                className=\"w-full bg-transparent text-green-400 placeholder-green-600 resize-none outline-none font-mono text-sm leading-relaxed\"\n                rows={1}\n              />\n              {input === \"\" && showCursor && (\n                <motion.div\n                  className=\"absolute top-0 left-0 w-2 h-5 bg-green-400\"\n                  animate={{ opacity: [1, 0] }}\n                  transition={{ duration: 0.53, repeat: Number.POSITIVE_INFINITY }}\n                />\n              )}\n            </div>\n\n            <div className=\"flex gap-1 mt-1\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => setIsRecording(!isRecording)}\n                className=\"h-8 w-8 p-0 hover:bg-green-500/20 text-green-400 hover:text-green-300\"\n              >\n                <motion.div\n                  animate={isRecording ? { scale: [1, 1.2, 1] } : {}}\n                  transition={{\n                    duration: 0.5,\n                    repeat: isRecording ? Number.POSITIVE_INFINITY : 0,\n                  }}\n                >\n                  <Mic className=\"h-4 w-4\" />\n                </motion.div>\n              </Button>\n\n              <Button\n                size=\"sm\"\n                onClick={handleSend}\n                disabled={!input.trim() || isSending}\n                className=\"h-8 w-8 p-0 bg-green-600 hover:bg-green-500 text-black\"\n              >\n                <AnimatePresence mode=\"wait\">\n                  {isSending ? (\n                    <motion.div\n                      key=\"loading\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                      className=\"w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin\"\n                    />\n                  ) : (\n                    <motion.div\n                      key=\"send\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  )\n}\n",
      "path": "src/components/FingUIComponents/ai-input/ai-input-05.tsx",
      "target": "src/components/FingUIComponents/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}",
      "path": "src/hooks/use-auto-resizer-textarea.ts",
      "target": "src/components/FingUIComponents/use-auto-resizer-textarea.ts"
    }
  ]
}