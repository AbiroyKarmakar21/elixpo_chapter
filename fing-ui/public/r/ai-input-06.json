{
  "name": "ai-input-06",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useRef } from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { Mic, Send, Cog, Wrench } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resizer-textarea\"\nimport { AIInputSixProps } from \"./types/types\"\n\n\nexport const AIInputSix = ({\n  placeholder = \"INPUT COMMAND SEQUENCE...\",\n  temperature = 98,\n  pressure = 100,\n  status = \"READY\",\n  onSend,\n  onRecordStart,\n  onRecordStop,\n}: AIInputSixProps) => {\n  const [input, setInput] = useState(\"\")\n  const [isRecording, setIsRecording] = useState(false)\n  const [isSending, setIsSending] = useState(false)\n  const [steamActive, setSteamActive] = useState(false)\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  useAutoResizeTextarea({minHeight: 52, maxHeight: 200})\n\n  const handleSend = async () => {\n    if (!input.trim()) return\n    setIsSending(true)\n    setSteamActive(true)\n\n    // Allow parent to handle send logic\n    await onSend?.(input)\n\n    // Fake delay for UI effect\n    await new Promise((resolve) => setTimeout(resolve, 1200))\n\n    setInput(\"\")\n    setIsSending(false)\n    setSteamActive(false)\n  }\n\n  const toggleRecording = () => {\n    if (isRecording) {\n      onRecordStop?.()\n    } else {\n      onRecordStart?.()\n    }\n    setIsRecording(!isRecording)\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault()\n      handleSend()\n    }\n  }\n\n  return (\n    <motion.div\n      className=\"w-full max-w-3xl mx-auto\"\n      initial={{ opacity: 0, y: 30 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8, ease: \"easeOut\" }}\n    >\n      <div className=\"relative bg-gradient-to-br from-gray-800 via-gray-700 to-gray-900 rounded-lg shadow-2xl border-4 border-gray-600 overflow-hidden\">\n        {/* Steam effects */}\n        <AnimatePresence>\n          {steamActive &&\n            [...Array(6)].map((_, i) => (\n              <motion.div\n                key={i}\n                initial={{ opacity: 0, scale: 0, y: 0 }}\n                animate={{\n                  opacity: [0, 0.6, 0],\n                  scale: [0, 1.5, 2],\n                  y: [-20, -60, -100],\n                }}\n                exit={{ opacity: 0 }}\n                transition={{\n                  duration: 2,\n                  delay: i * 0.2,\n                  ease: \"easeOut\",\n                }}\n                className=\"absolute w-4 h-4 bg-white/20 rounded-full blur-sm\"\n                style={{ left: `${20 + i * 10}%`, top: \"80%\" }}\n              />\n            ))}\n        </AnimatePresence>\n\n        <div className=\"relative z-10 p-6\">\n          {/* Industrial header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 4, repeat: Number.POSITIVE_INFINITY, ease: \"linear\" }}\n              >\n                <Cog className=\"w-8 h-8 text-orange-400\" />\n              </motion.div>\n              <div>\n                <h3 className=\"text-xl font-bold text-orange-400 font-mono tracking-wider\">INDUSTRIAL AI UNIT</h3>\n                <div className=\"text-sm text-gray-400 font-mono\">\n                  MODEL: IA-2024 | STATUS: {status}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Input field */}\n          <div className=\"relative mx-8\">\n            <textarea\n              ref={textareaRef}\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder={placeholder}\n              className=\"w-full bg-gray-900/80 text-orange-300 placeholder-orange-600/70 border-2 border-orange-500/50 px-4 py-3 pr-20 resize-none outline-none font-mono text-sm leading-relaxed focus:border-orange-400 transition-all duration-300\"\n              rows={1}\n            />\n\n            {/* Buttons */}\n            <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={toggleRecording}\n                className=\"h-8 w-8 p-0 hover:bg-orange-500/20 text-orange-400 border border-orange-500/30\"\n              >\n                <motion.div\n                  animate={\n                    isRecording\n                      ? { scale: [1, 1.2, 1], rotate: [0, 10, -10, 0] }\n                      : {}\n                  }\n                  transition={{ duration: 0.8, repeat: isRecording ? Number.POSITIVE_INFINITY : 0 }}\n                >\n                  <Mic className=\"h-4 w-4\" />\n                </motion.div>\n              </Button>\n\n              <Button\n                size=\"sm\"\n                onClick={handleSend}\n                disabled={!input.trim() || isSending}\n                className=\"h-8 w-8 p-0 bg-orange-600 hover:bg-orange-500 text-gray-900 shadow-lg border border-orange-400\"\n              >\n                <AnimatePresence mode=\"wait\">\n                  {isSending ? (\n                    <motion.div key=\"loading\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>\n                      <Wrench className=\"h-4 w-4 animate-pulse\" />\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      key=\"send\"\n                      initial={{ opacity: 0, x: -5 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 5 }}\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </Button>\n            </div>\n          </div>\n\n          {/* Control panel */}\n          <div className=\"flex justify-between items-center mt-6 px-8\">\n            <div className=\"flex gap-4\">\n              <div className=\"text-xs font-mono text-orange-400\">TEMP: {temperature}Â°C</div>\n              <div className=\"text-xs font-mono text-orange-400\">PRESSURE: {pressure} PSI</div>\n            </div>\n            <div className=\"flex gap-2\">\n              <motion.div\n                className={`w-3 h-3 rounded-full ${\n                  status === \"READY\" ? \"bg-green-400\" : status === \"ERROR\" ? \"bg-red-500\" : \"bg-yellow-400\"\n                }`}\n                animate={{ opacity: [1, 0.3, 1] }}\n                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}\n              />\n              <span className=\"text-xs font-mono text-green-400\">{status}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  )\n}\n",
      "path": "src/components/FingUIComponents/ai-input/ai-input-06.tsx",
      "target": "src/components/FingUIComponents/ai-input-06.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}",
      "path": "src/hooks/use-auto-resizer-textarea.ts",
      "target": "src/components/FingUIComponents/use-auto-resizer-textarea.ts"
    }
  ]
}