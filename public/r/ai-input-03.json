{
  "name": "ai-input-03",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Mic } from \"lucide-react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface AIInputThreeProps {\n  demo?: boolean;\n  autoResetTime?: number;\n  pulseBars?: number;\n  barMinHeight?: number;\n  barMaxHeight?: number;\n  useSpeechRecognition?: boolean; // enable speech recognition\n  onStart?: () => void;\n  onStop?: (duration: number) => void;\n  onSubmit?: (transcript: string, duration: number) => void; // userâ€™s spoken response\n}\n\nexport const AIInputThree = ({\n  demo = true,\n  autoResetTime = 3000,\n  pulseBars = 48,\n  barMinHeight = 20,\n  barMaxHeight = 80,\n  useSpeechRecognition = false,\n  onStart,\n  onStop,\n  onSubmit,\n}: AIInputThreeProps) => {\n    \n  const [submitted, setSubmitted] = useState(false);\n  const [time, setTime] = useState(0);\n  const [isClient, setIsClient] = useState(false);\n  const [isDemo, setIsDemo] = useState(demo);\n  const [transcript, setTranscript] = useState(\"\");\n  const recognitionRef = useRef<SpeechRecognition | null>(null);\n\n  useEffect(() => {\n    setIsClient(true);\n    if (useSpeechRecognition && typeof window !== \"undefined\") {\n      const SpeechRecognition =\n        (window as any).SpeechRecognition ||\n        (window as any).webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        const recognition = new SpeechRecognition();\n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = \"en-US\";\n\n        recognition.onresult = (event: SpeechRecognitionEvent) => {\n          let currentTranscript = \"\";\n          //@ts-ignore\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            currentTranscript += event.results[i][0].transcript;\n          }\n          setTranscript(currentTranscript.trim());\n        };\n\n        recognitionRef.current = recognition;\n      }\n    }\n  }, [useSpeechRecognition]);\n\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (submitted) {\n      intervalId = setInterval(() => {\n        setTime((t) => t + 1);\n      }, 1000);\n    } else {\n      setTime(0);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [submitted]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs\n      .toString()\n      .padStart(2, \"0\")}`;\n  };\n\n  // Demo loop\n  useEffect(() => {\n    if (!isDemo) return;\n\n    let timeoutId: NodeJS.Timeout;\n    const runAnimation = () => {\n      setSubmitted(true);\n      onStart?.();\n      timeoutId = setTimeout(() => {\n        setSubmitted(false);\n        onStop?.(time);\n        onSubmit?.(\"Demo transcript\", time);\n        timeoutId = setTimeout(runAnimation, 1000);\n      }, autoResetTime);\n    };\n\n    const initialTimeout = setTimeout(runAnimation, 100);\n    return () => {\n      clearTimeout(timeoutId);\n      clearTimeout(initialTimeout);\n    };\n  }, [isDemo, autoResetTime, onStart, onStop, onSubmit, time]);\n\n  const handleClick = () => {\n    if (isDemo) {\n      setIsDemo(false);\n      setSubmitted(false);\n      return;\n    }\n\n    if (!submitted) {\n      setSubmitted(true);\n      onStart?.();\n      if (useSpeechRecognition && recognitionRef.current) {\n        recognitionRef.current.start();\n        setTranscript(\"\");\n      }\n    } else {\n      setSubmitted(false);\n      onStop?.(time);\n      if (useSpeechRecognition && recognitionRef.current) {\n        recognitionRef.current.stop();\n        onSubmit?.(transcript, time);\n      } else {\n        onSubmit?.(\"\", time);\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-full py-4\">\n      <div className=\"relative max-w-xl w-full mx-auto flex items-center flex-col gap-2\">\n        <button\n          className={cn(\n            \"group w-16 h-16 rounded-xl flex items-center justify-center transition-colors\",\n            submitted\n              ? \"bg-none\"\n              : \"bg-none hover:bg-black/10 dark:hover:bg-white/10\"\n          )}\n          type=\"button\"\n          onClick={handleClick}\n        >\n          {submitted ? (\n            <div\n              className=\"w-6 h-6 rounded-sm animate-spin bg-black  dark:bg-white cursor-pointer pointer-events-auto\"\n              style={{ animationDuration: \"3s\" }}\n            />\n          ) : (\n            <Mic className=\"w-6 h-6 text-black/70 dark:text-white/70\" />\n          )}\n        </button>\n\n        <span\n          className={cn(\n            \"font-mono text-sm transition-opacity duration-300\",\n            submitted\n              ? \"text-black/70 dark:text-white/70\"\n              : \"text-black/30 dark:text-white/30\"\n          )}\n        >\n          {formatTime(time)}\n        </span>\n\n        <div className=\"h-4 w-64 flex items-center justify-center gap-0.5\">\n          {[...Array(pulseBars)].map((_, i) => (\n            <div\n              key={i}\n              className={cn(\n                \"w-0.5 rounded-full transition-all duration-300\",\n                submitted\n                  ? \"bg-black/50 dark:bg-white/50 animate-pulse\"\n                  : \"bg-black/10 dark:bg-white/10 h-1\"\n              )}\n              style={\n                submitted && isClient\n                  ? {\n                      height: `${\n                        barMinHeight +\n                        Math.random() * (barMaxHeight - barMinHeight)\n                      }%`,\n                      animationDelay: `${i * 0.05}s`,\n                    }\n                  : undefined\n              }\n            />\n          ))}\n        </div>\n\n        <p className=\"h-4 text-xs text-black/70 dark:text-white/70\">\n          {submitted ? \"Listening...\" : \"Click to speak\"}\n        </p>\n      </div>\n    </div>\n  );\n}\n",
      "path": "src/components/FingUIComponents/ai-input/ai-input-03.tsx",
      "target": "/components/FingUIComponents/ai-input-03.tsx"
    }
  ]
}