{
  "name": "footer3d",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "'use client'\nimport React, { useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport * as THREE from 'three'\nimport Link from 'next/link'\nimport { ArrowUpRight, Circle } from 'lucide-react'\nimport { motion, useScroll, useTransform } from 'framer-motion'\nimport { FooterProps } from './tpyes'\n\n// === Default Cube Shader Model ===\nconst vertexShader = `\n  varying vec2 vUv;\n  varying float vElevation;\n  varying float vShadow;\n\n  uniform float uTime;\n\n  // --- Perlin Noise helpers (Ashima Arts) ---\n  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n  vec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\n  vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\n  float perlinNoise3D(vec3 P) {\n    vec3 i0 = floor(P);\n    vec3 i1 = i0 + vec3(1.0);\n    vec3 f0 = fract(P);\n    vec3 f1 = f0 - vec3(1.0);\n    vec3 f = f0 * f0 * (3.0 - 2.0 * f0);\n\n    vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x);\n    vec4 iy = vec4(i0.y, i0.y, i1.y, i1.y);\n    vec4 iz0 = vec4(i0.z);\n    vec4 iz1 = vec4(i1.z);\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = fract(ixy0 * (1.0 / 41.0)) * 2.0 - 1.0;\n    vec4 gy0 = abs(gx0) - 0.5;\n    vec4 gz0 = floor(gx0 + 0.5);\n    gx0 -= gz0;\n\n    vec4 gx1 = fract(ixy1 * (1.0 / 41.0)) * 2.0 - 1.0;\n    vec4 gy1 = abs(gx1) - 0.5;\n    vec4 gz1 = floor(gx1 + 0.5);\n    gx1 -= gz1;\n\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(\n      dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)\n    ));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n\n    vec4 norm1 = taylorInvSqrt(vec4(\n      dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)\n    ));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, f0);\n    float n100 = dot(g100, vec3(f1.x, f0.yz));\n    float n010 = dot(g010, vec3(f0.x, f1.y, f0.z));\n    float n110 = dot(g110, vec3(f1.xy, f0.z));\n    float n001 = dot(g001, vec3(f0.xy, f1.z));\n    float n101 = dot(g101, vec3(f1.x, f0.y, f1.z));\n    float n011 = dot(g011, vec3(f0.x, f1.yz));\n    float n111 = dot(g111, f1);\n\n    vec3 fade_xyz = f * f * (3.0 - 2.0 * f);\n    vec4 n_z = mix(\n      vec4(n000, n100, n010, n110),\n      vec4(n001, n101, n011, n111),\n      fade_xyz.z\n    );\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\n    return 2.2 * n_xyz;\n  }\n\n  void main() {\n    vUv = uv;\n\n    float noiseFreq = 5.0;\n    float noiseAmp = 0.25;\n\n    vec3 pos = position;\n    float n = perlinNoise3D(pos * noiseFreq + uTime * 0.7);\n    pos += normal * n * noiseAmp;\n\n    vElevation = pos.y;\n    vec3 displacedNormal = normalize(normal + vec3(0.0, n * noiseAmp, 0.0));\n    float shadow = clamp(dot(displacedNormal, vec3(0.0, 2.0, 0.0)), 0.0, 1.0);\n    vShadow = shadow;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n`\n\n// Fragment Shader\nconst fragmentShader = `\n  precision mediump float;\n\n  varying vec2 vUv;\n  varying float vElevation;\n  varying float vShadow;\n\n  uniform float uColorChange;\n\n  void main() {\n    // Monochrome palette\n    vec4 c1 = vec4(0.9, 0.9, 0.9, 1.0);   // light grey\n    vec4 c2 = vec4(0.6, 0.6, 0.6, 1.0);   // medium grey\n    vec4 c3 = vec4(0.3, 0.3, 0.3, 1.0);   // dark grey\n    vec4 c4 = vec4(0.05, 0.05, 0.05, 1.0); // almost black\n\n    float dist = distance(vUv, vec2(0.5, 0.5));\n    float organic = smoothstep(0.0, 0.7, dist);\n\n    float noise = fract(sin(dot(vUv * 100.0, vec2(12.9898,78.233))) * 43758.5453);\n    float blendFactor = mix(organic, noise, 0.18);\n\n    vec4 colormixone = mix(c1, c2, blendFactor);\n    vec4 colormixtwo = mix(c3, c4, blendFactor);\n\n    vec4 final = mix(colormixone, colormixtwo, uColorChange);\n\n    gl_FragColor = final;\n  }\n`;\n\nconst DefaultCube = () => {\n  const meshRef = useRef<THREE.Mesh>(null!)\n  const uniforms = useRef({\n    uTime: { value: 0 },\n    uColorChange: { value: 0 },\n  })\n\n  useFrame((state) => {\n    uniforms.current.uTime.value = state.clock.getElapsedTime()\n    uniforms.current.uColorChange.value =\n      (Math.sin(state.clock.elapsedTime) + 1) / 2\n  })\n\n  return (\n    <mesh ref={meshRef} rotation={[0.4, 0.6, 0]}>\n      <icosahedronGeometry args={[3.2, 40]} />\n      <shaderMaterial\n        vertexShader={vertexShader}\n        fragmentShader={fragmentShader}\n        uniforms={uniforms.current}\n        side={THREE.DoubleSide}\n        //@ts-ignore\n        flatShading\n        wireframe\n      />\n    </mesh>\n  )\n}\n\n// === Footer Props ===\n\n\nexport const Footer3d: React.FC<FooterProps> = ({\n  email = 'fingui$in@gmail.com',\n  location = 'India, Kolkata',\n  socials = [\n    { name: 'LinkedIn', href: '#' },\n    { name: 'Github', href: '#' },\n  ],\n  navLeft = [\n    { name: 'Contact', href: '#' },\n    { name: 'Blogs', href: '#' },\n    { name: 'Collaboration', href: '#' },\n  ],\n  navRight = [\n    { name: 'Docs', href: '#' },\n    { name: 'Theme', href: '#' },\n    { name: 'Components', href: '#' },\n  ],\n  language = 'EN',\n  credits = '© In_Cognita - 2025 | Pierre Patrault & Aristide Benoist',\n  legal = [\n    { name: 'Legal & Terms', href: '#' },\n    { name: 'Privacy', href: '#' },\n  ],\n  model,\n}) => {\n  const ref = useRef(null)\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: ['start end', 'center center'],\n  })\n\n  const y = useTransform(scrollYProgress, [0, 1], ['100%', '0%'])\n  const opacity = useTransform(scrollYProgress, [0, 0.5, 1], [0, 1, 1])\n\n  return (\n    <section ref={ref} className=\"py-10 relative overflow-x-clip\">\n      <div className=\"container mx-auto flex flex-col items-center gap-y-5\">\n        {/* 3D Model Section */}\n        <div className=\"hidden md:block w-full h-[600px] relative\">\n          <Canvas camera={{ position: [5, 5, 5], fov: 50 }}>\n            <ambientLight intensity={0.5} />\n            <directionalLight position={[5, 5, 5]} />\n            {model || <DefaultCube />}\n            <OrbitControls enableZoom={false} />\n          </Canvas>\n\n          {/* Parallax Text */}\n          <motion.div\n            style={{ y, opacity }}\n            className=\"absolute inset-0 flex flex-col items-center justify-center font-medium text-4xl md:text-6xl\"\n          >\n            <p>Join the Fing Developer Community</p>\n            <p>Let’s Build the Future Together</p>\n\n            <p className=\"border border-white px-4 py-1 rounded-2xl mt-2 font-mono text-base\">\n              <Link href=\"/\" className=\"flex items-center gap-2\">\n                Let&apos;s Reach us <Circle className=\"size-4\" />\n              </Link>\n            </p>\n          </motion.div>\n        </div>\n\n        {/* Middle Section */}\n        <div className=\"flex flex-col md:flex-row justify-between w-full items-center gap-6 text-center md:text-left\">\n          <div className=\"flex flex-col items-center md:items-start gap-2\">\n            <span className=\"text-xs font-mono\">{email}</span>\n            <p className=\"text-xs font-mono\">{location}</p>\n\n            <div className=\"flex flex-wrap justify-center md:justify-start items-center gap-4 mt-2\">\n              {socials.map((s) => (\n                <a\n                  key={s.name}\n                  href={s.href}\n                  className=\"flex items-center gap-1 text-xs font-mono hover:underline\"\n                >\n                  {s.name} <ArrowUpRight className=\"size-4\" />\n                </a>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex flex-wrap justify-center md:justify-end gap-16 text-xs font-mono\">\n            <div className=\"flex flex-col gap-1 items-center md:items-end\">\n              {navLeft.map((n) => (\n                <a key={n.name} href={n.href} className=\"hover:underline\">\n                  {n.name}\n                </a>\n              ))}\n            </div>\n\n            <div className=\"flex flex-col gap-1 items-center md:items-start\">\n              {navRight.map((n) => (\n                <a key={n.name} href={n.href} className=\"hover:underline\">\n                  {n.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Bottom */}\n        <footer className=\"w-full font-mono border-t border-gray-600 pt-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4 text-sm text-center md:text-left\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-3\">\n              <button className=\"border border-gray-400 px-3 py-1 rounded-full hover:bg-white hover:text-purple-900 transition\">\n                {language}\n              </button>\n              <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 items-center text-xs\">\n                <span>{credits}</span>\n              </div>\n            </div>\n\n            <div className=\"flex flex-wrap justify-center md:justify-end gap-6 text-xs\">\n              {legal.map((l) => (\n                <a key={l.name} href={l.href} className=\"hover:underline\">\n                  {l.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        </footer>\n      </div>\n    </section>\n  )\n}\n\n\n",
      "path": "src/components/FingUIComponents/landing/footer3d.tsx",
      "target": "/components/FingUIComponents/footer3d.tsx"
    }
  ]
}