{
  "name": "button-glitch",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useRef, useEffect, useState } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { gsap } from \"gsap\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\nimport { GlitchButtonProps } from \"./types/types\"\n\n\nexport const ButtonGlitch = ({\n  children,\n  className,\n  onClick,\n  type = \"button\",\n  disabled = false,\n  glitch = true,\n  glitchInterval = 3000,\n  glitchDuration = 0.1,\n  glitchColors = { primary: \"#ff0000\", secondary: \"#00ffff\" },\n  variant = \"primary\",\n}: GlitchButtonProps) => {\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const [isGlitching, setIsGlitching] = useState(false)\n\n  useEffect(() => {\n    if (!glitch) return\n    const button = buttonRef.current\n    if (!button) return\n\n    const glitchAnimation = () => {\n      setIsGlitching(true)\n\n      gsap\n        .timeline()\n        .to(button, { x: -2, duration: glitchDuration })\n        .to(button, { x: 2, duration: glitchDuration })\n        .to(button, { x: -1, duration: glitchDuration })\n        .to(button, { x: 1, duration: glitchDuration })\n        .to(button, { x: 0, duration: glitchDuration })\n        .call(() => setIsGlitching(false))\n    }\n\n    const interval = setInterval(glitchAnimation, glitchInterval)\n    return () => clearInterval(interval)\n  }, [glitch, glitchInterval, glitchDuration])\n\n  const baseStyles = {\n    primary: \"bg-red-600 hover:bg-red-700 text-white border-2 border-red-400\",\n    secondary: \"bg-blue-600 hover:bg-blue-700 text-white border-2 border-blue-400\",\n    ghost: \"bg-transparent border-2 border-gray-400 text-gray-700 hover:bg-gray-100\",\n    default: \"bg-gray-800 hover:bg-gray-900 text-white border-2 border-gray-700\",\n  }\n\n  return (\n    <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n      <Button\n        ref={buttonRef}\n        onClick={onClick}\n        type={type}\n        disabled={disabled}\n        className={cn(\n          \"relative font-mono px-8 py-3 rounded transition-colors\",\n          baseStyles[variant],\n          isGlitching &&\n            `shadow-[2px_0_0_${glitchColors.primary},-2px_0_0_${glitchColors.secondary}]`,\n          className,\n        )}\n        style={{\n          textShadow: isGlitching\n            ? `2px 0 0 ${glitchColors.primary}, -2px 0 0 ${glitchColors.secondary}`\n            : \"none\",\n        }}\n      >\n        {children}\n      </Button>\n    </motion.div>\n  )\n}\n",
      "path": "src/components/FingUIComponents/buttons/button-glitch.tsx",
      "target": "/components/FingUIComponents/button-glitch.tsx"
    }
  ]
}