{
  "name": "ai-input-07",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n  Plus,\n  File,\n  Camera,\n  X,\n  ArrowRight,\n  Brain,\n  ChevronDown,\n  Lock,\n  Unlock,\n} from \"lucide-react\";\nimport {\n  useState,\n  useRef,\n  useCallback,\n  type RefObject,\n} from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resizer-textarea\";\nimport { useFileInput } from \"@/hooks/use-file-input\";\nimport { useClickOutside } from \"@/hooks/use-click-outside\";\nimport { AIInputSevenProps, Model } from \"./types/types\";\n\n\n\nconst defaultModels: Model[] = [\n  {\n    name: \"GPT-4\",\n    description: \"OpenAI’s flagship reasoning model\",\n  },\n  {\n    name: \"Claude\",\n    description: \"Anthropic’s conversational AI\",\n  },\n  {\n    name: \"Gemini\",\n    description: \"Google DeepMind’s latest multimodal model\",\n  },\n];\n\nconst FileDisplay = ({\n  fileName,\n  onClear,\n}: {\n  fileName: string;\n  onClear: () => void;\n}) => (\n  <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg\">\n    <File className=\"w-4 h-4 dark:text-white\" />\n    <span className=\"text-sm dark:text-white\">{fileName}</span>\n    <button\n      type=\"button\"\n      onClick={onClear}\n      className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10\"\n    >\n      <X className=\"w-3 h-3 dark:text-white\" />\n    </button>\n  </div>\n);\n\nexport const AIInputSeven = ({\n  models = defaultModels, // ✅ fallback to default models\n  defaultModel,\n  onSend,\n}: AIInputSevenProps) => {\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState({\n    value: \"\",\n    isPrivacyMode: false,\n    selectedModel: defaultModel || models[0]?.name || \"\",\n    isMenuOpen: false,\n    isModelMenuOpen: false,\n  });\n\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight: 40,\n    maxHeight: 200,\n  });\n\n  // ✅ file handling\n  const {\n    fileName,\n    fileInputRef,\n    handleFileSelect,\n    clearFile,\n  } = useFileInput({ accept: \"image/*\", maxSize: 5 });\n\n  const updateState = useCallback(\n    (updates: Partial<typeof state>) =>\n      setState((prev) => ({ ...prev, ...updates })),\n    []\n  );\n\n  useClickOutside(menuRef as RefObject<HTMLElement>, () => {\n    if (state.isMenuOpen) updateState({ isMenuOpen: false });\n    if (state.isModelMenuOpen) updateState({ isModelMenuOpen: false });\n  });\n\n  const handleSend = () => {\n    if (onSend) {\n      onSend({\n        value: state.value,\n        selectedModel: state.selectedModel,\n        fileName,\n        isPrivacyMode: state.isPrivacyMode,\n      });\n    }\n    updateState({ value: \"\" });\n    adjustHeight(true);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"w-full py-4\">\n      <div className=\"rounded-xl bg-black/5 dark:bg-white/5\">\n        <div ref={menuRef}>\n          {/* Top Menu: Model + Privacy */}\n          <div className=\"border-b border-black/10 dark:border-white/10\">\n            <div className=\"flex justify-between items-center px-4 py-2 text-sm text-zinc-600 dark:text-zinc-400\">\n              {/* Model Menu */}\n              <div className=\"relative\" data-model-menu>\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    updateState({\n                      isModelMenuOpen: !state.isModelMenuOpen,\n                    })\n                  }\n                  className=\"flex items-center gap-1.5 hover:bg-black/5 dark:hover:bg-white/5 rounded-lg px-2 py-1\"\n                >\n                  <Brain className=\"w-4 h-4 dark:text-white\" />\n                  <span className=\"dark:text-white\">\n                    {state.selectedModel || \"Select model\"}\n                  </span>\n                  <ChevronDown className=\"w-3 h-3 ml-0.5 dark:text-white\" />\n                </button>\n\n                {state.isModelMenuOpen && (\n                  <div className=\"absolute top-full left-0 mt-1 w-64 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 z-50 border border-black/10 dark:border-white/10\">\n                    {models.length > 0 ? (\n                      models.map((model) => (\n                        <button\n                          type=\"button\"\n                          key={model.name}\n                          className=\"w-full px-3 py-1.5 text-left hover:bg-black/5 dark:hover:bg-white/5 flex items-center gap-2 text-sm transition-colors dark:text-white\"\n                          onClick={() =>\n                            updateState({\n                              selectedModel: model.name,\n                              isModelMenuOpen: false,\n                            })\n                          }\n                        >\n                          <div className=\"flex items-center gap-2 flex-1\">\n                            {model.icon || <Brain className=\"w-4 h-4\" />}\n                            <span>{model.name}</span>\n                          </div>\n                          {model.description && (\n                            <span className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                              {model.description}\n                            </span>\n                          )}\n                        </button>\n                      ))\n                    ) : (\n                      <div className=\"px-3 py-2 text-sm text-zinc-500 dark:text-zinc-400\">\n                        No models available\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Privacy Toggle */}\n              <button\n                type=\"button\"\n                onClick={() =>\n                  updateState({ isPrivacyMode: !state.isPrivacyMode })\n                }\n                className={cn(\n                  \"flex items-center gap-2 p-1.5 rounded-lg hover:bg-black/5 dark:hover:bg-white/5\",\n                  state.isPrivacyMode\n                    ? \"text-green-600\"\n                    : \"text-zinc-600 dark:text-zinc-400\"\n                )}\n              >\n                {state.isPrivacyMode ? (\n                  <Lock className=\"w-4 h-4\" />\n                ) : (\n                  <Unlock className=\"w-4 h-4\" />\n                )}\n                <span>Privacy</span>\n              </button>\n            </div>\n          </div>\n\n          {/* File Preview */}\n          {fileName && (\n            <div className=\"px-4 pt-2\">\n              <FileDisplay fileName={fileName} onClear={clearFile} />\n            </div>\n          )}\n\n          {/* Hidden File Input */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            hidden\n            onChange={handleFileSelect}\n          />\n\n          {/* Textarea + Actions */}\n          <div className=\"relative px-2 py-2\">\n            {/* Action Menu */}\n            <div\n              className=\"absolute left-3 top-1/2 -translate-y-1/2\"\n              data-action-menu\n            >\n              <button\n                type=\"button\"\n                onClick={() =>\n                  updateState({ isMenuOpen: !state.isMenuOpen })\n                }\n                className=\"rounded-3xl bg-black/5 dark:bg-white/5 p-2 hover:bg-black/10 dark:hover:bg-white/10\"\n              >\n                <Plus className=\"w-4 h-4 dark:text-white\" />\n              </button>\n\n              {state.isMenuOpen && (\n                <div className=\"absolute left-0 top-full mt-1 bg-white dark:bg-zinc-800 rounded-md shadow-lg py-1 min-w-[140px] z-50 border border-black/10 dark:border-white/10\">\n                  {[\n                    {\n                      icon: File,\n                      label: \"Upload File\",\n                      onClick: () => fileInputRef.current?.click(),\n                    },\n                    { icon: Camera, label: \"Take Photo\" },\n                  ].map(({ icon: Icon, label, onClick }) => (\n                    <button\n                      type=\"button\"\n                      key={label}\n                      onClick={onClick}\n                      className=\"w-full px-3 py-1.5 flex items-center gap-2 hover:bg-black/5 dark:hover:bg-white/5 text-sm transition-colors dark:text-white\"\n                    >\n                      <Icon className=\"w-4 h-4 dark:text-white\" />\n                      <span>{label}</span>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Text Input */}\n            <Textarea\n              ref={textareaRef}\n              value={state.value}\n              placeholder=\"Type your message...\"\n              className={cn(\n                \"w-full rounded-xl pl-14 pr-10 border-none resize-none bg-transparent dark:text-white placeholder:text-black/70 dark:placeholder:text-white/70\",\n                \"min-h-[40px]\"\n              )}\n              onKeyDown={handleKeyDown}\n              onChange={(e) => {\n                updateState({ value: e.target.value });\n                adjustHeight();\n              }}\n            />\n\n            {/* Send Button */}\n            <button\n              type=\"button\"\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 p-1\"\n              onClick={handleSend}\n            >\n              <ArrowRight\n                className={cn(\n                  \"w-4 h-4 dark:text-white\",\n                  state.value ? \"opacity-100\" : \"opacity-30\"\n                )}\n              />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "path": "src/components/FingUIComponents/ai-input/ai-input-07.tsx",
      "target": "src/components/FingUIComponents/ai-input-07.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\nimport { useEffect, useRef, useCallback } from \"react\";\n\ninterface UseAutoResizeTextareaProps {\n    minHeight: number;\n    maxHeight?: number;\n}\n\nexport function useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n}: UseAutoResizeTextareaProps) {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const adjustHeight = useCallback(\n        (reset?: boolean) => {\n            const textarea = textareaRef.current;\n            if (!textarea) return;\n\n            if (reset) {\n                textarea.style.height = `${minHeight}px`;\n                return;\n            }\n\n            // Temporarily shrink to get the right scrollHeight\n            textarea.style.height = `${minHeight}px`;\n\n            // Calculate new height\n            const newHeight = Math.max(\n                minHeight,\n                Math.min(\n                    textarea.scrollHeight,\n                    maxHeight ?? Number.POSITIVE_INFINITY\n                )\n            );\n\n            textarea.style.height = `${newHeight}px`;\n        },\n        [minHeight, maxHeight]\n    );\n\n    useEffect(() => {\n        // Set initial height\n        const textarea = textareaRef.current;\n        if (textarea) {\n            textarea.style.height = `${minHeight}px`;\n        }\n    }, [minHeight]);\n\n    // Adjust height on window resize\n    useEffect(() => {\n        const handleResize = () => adjustHeight();\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, [adjustHeight]);\n\n    return { textareaRef, adjustHeight };\n}",
      "path": "src/hooks/use-auto-resizer-textarea.ts",
      "target": "src/components/FingUIComponents/use-auto-resizer-textarea.ts"
    }
  ]
}