{
  "name": "navbar-extended",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport Image from \"next/image\";\nimport React, { useEffect, useState } from \"react\";\nimport { LOGO } from \"../../../../public/assets/images/images\";\nimport {\n  Blocks,\n  Code,\n  FileCode,\n  GitBranch,\n  HandPlatter,\n  Moon,\n  \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport ThemeToggleButton from \"@/components/ui/theme-toggle-button\";\nimport { useTheme } from \"next-themes\";\nimport { BsDiscord } from \"react-icons/bs\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useOnClickOutside } from \"usehooks-ts\";\nimport { cn } from \"@/lib/utils\";\nimport { useRouter } from \"next/navigation\";\nimport { NavbarV1Props, NavOption } from \"./tpyes\";\n\n\n\nexport default function NavbarExtended  ({\n  logoLight = LOGO.LIGHT_LOGO,\n  logoDark = LOGO.DARK_LOGO,\n  brandName = \"FingUI\",\n  navOptions = [\n    { title: \"Docs\", href: \"/docs\", icon: FileCode },\n    { title: \"Components\", href: \"/docs/components/ai\", icon: Code },\n    { title: \"Themes\", href: \"/themes\", icon: Moon },\n    { title: \"Color\", href: \"/color\", icon: HandPlatter },\n    { title: \"Blocks\", href: \"/block\", icon: Blocks },\n  ],\n  rightActions,\n  activeColor = \"text-primary\",\n}: NavbarV1Props)  {\n  const { theme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => setMounted(true), []);\n\n  if (!mounted) return null;\n\n  return (\n    <section className=\"py-3 sticky top-0 z-50\">\n      <div className=\"container px-4 md:px-10 lg:px-2 mx-auto\">\n        <div className=\"flex items-center justify-between rounded-full px-4 md:px-0\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2\">\n            <Image\n              src={theme === \"dark\" ? logoDark : logoLight}\n              alt=\"logo\"\n              className=\"w-10 h-10 object-contain\"\n            />\n            <span className=\"font-mono\">{brandName}</span>\n          </div>\n\n          {/* Desktop Nav */}\n          <div className=\"gap-5 hidden md:block\">\n            <ExpandedTabs\n              className=\"mt-2 font-mono\"\n              tabs={navOptions}\n              activeColor={activeColor}\n            />\n          </div>\n\n          {/* Right Section */}\n          <div className=\"flex items-center gap-2\">\n            {rightActions ? (\n              rightActions\n            ) : (\n              <>\n                <Button className=\"py-2 px-3\" variant={\"ghost\"}>\n                  <Link href={\"https://github.com/IgYaHiko\"}>\n                    <GitBranch className=\"size-4\" />\n                  </Link>\n                </Button>\n                <ThemeToggleButton variant=\"circle-blur\" />\n                <Button className=\"py-2 px-3\" variant={\"ghost\"}>\n                  <Link href={\"https://discord.gg/rNChHMcGdG\"}>\n                    <BsDiscord className=\"size-4\" />\n                  </Link>\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\n\n\n\n\n\ninterface ExpandedTabsProps {\n  tabs: NavOption[];\n  className?: string;\n  activeColor?: string;\n  onChange?: (index: number | null) => void;\n}\n\nconst buttonVariants = {\n  initial: { gap: 0, paddingLeft: \".5rem\", paddingRight: \".5rem\" },\n  animate: (isSelected: boolean) => ({\n    gap: isSelected ? \".5rem\" : 0,\n    paddingLeft: isSelected ? \"1rem\" : \".5rem\",\n    paddingRight: isSelected ? \"1rem\" : \".5rem\",\n  }),\n};\n\nconst spanVariants = {\n  initial: { width: 0, opacity: 0 },\n  animate: { width: \"auto\", opacity: 1 },\n  exit: { width: 0, opacity: 0 },\n};\n\nconst transition = { delay: 0.1, type: \"spring\", bounce: 0, duration: 0.6 };\n\nexport function ExpandedTabs({\n  tabs,\n  className,\n  activeColor = \"text-primary\",\n  onChange,\n}: ExpandedTabsProps) {\n  const router = useRouter();\n  const [selected, setSelected] = React.useState<number | null>(null);\n  const outsideClickRef = React.useRef<HTMLDivElement>(\n    null as unknown as HTMLDivElement\n  );\n\n  useOnClickOutside(outsideClickRef, () => {\n    setSelected(null);\n    onChange?.(null);\n  });\n\n  const handleSelect = (index: number, href?: string) => {\n    setSelected(index);\n    onChange?.(index);\n    if (href) router.push(href);\n  };\n\n  return (\n    <div\n      ref={outsideClickRef}\n      className={cn(\n        \"flex gap-2 rounded-2xl border bg-background p-1 shadow-sm\",\n        className\n      )}\n    >\n      {tabs.map((tab, index) => {\n        const Icon = tab.icon;\n        return (\n          <motion.button\n            key={tab.title}\n            variants={buttonVariants}\n            initial={false}\n            animate=\"animate\"\n            custom={selected === index}\n            onClick={() => handleSelect(index, tab.href)}\n            //@ts-ignore\n            transition={transition}\n            className={cn(\n              \"relative flex items-center rounded-xl px-4 py-2 text-sm font-medium transition-colors duration-300\",\n              selected === index\n                ? cn(\"bg-muted\", activeColor)\n                : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n            )}\n          >\n            <Icon size={20} />\n            <AnimatePresence initial={false}>\n              {selected === index && (\n                <motion.span\n                  variants={spanVariants}\n                  initial=\"initial\"\n                  animate=\"animate\"\n                  exit=\"exit\"\n                  //@ts-ignore\n                  transition={transition}\n                  className=\"overflow-hidden\"\n                >\n                  {tab.title}\n                </motion.span>\n              )}\n            </AnimatePresence>\n          </motion.button>\n        );\n      })}\n    </div>\n  );\n}\n",
      "path": "src/components/FingUIComponents/landing/navbar-extended.tsx",
      "target": "/components/FingUIComponents/navbar-extended.tsx"
    }
  ]
}